<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace： 命名空间：作用：1、隔离SQL语句的；2、到后面了，指定要代理的哪个接口类

	Mapper代理规则：
	
	1、Mapper接口类的全路径和Mapper映射文件中的namespace一致：告诉他给哪个接口类做的代理
	2、Mapper接口类中的方法名必须和Mapper映射文件中的StatementID一致
	3、Mapper接口类中的方法形参类型必须和Mapper映射文件中的parameterType一致
	4、Mapper接口类中的方法返回值类型必须和Mapper映射文件中的ResultType一致


 -->
<mapper namespace="com.itheima.mapper.UserMapper">


	<!-- 
		Select标签：是用查询用的标签
		id: 指定的SQLID，StatementID
		#{}： 占位符  
			注：1、里面不能为空
			   2、当输入简单类型时里面的参数随便起，任意值：建议大家用指定的参数名
		parameterType: 输入参数类型
		parameterMap： 输入参数类型   但是在MyBatis-3.0以上版本废除了
		resultType： 返回值类型：如果返回的是POJO对象那么这里写入POJO的全路径
	 -->
	<select id="findUserById" parameterType="Integer" resultType="com.itheima.pojo.User">
		select * from user where id = #{id} 
	</select>
	
	<!-- 根据用户名模糊查询用户列表 
		resultType: 返回值类型：如果返回值类型是List集合类型那么ResultType里面是指定每一个元素的类型
		占位符：预编译过程，防止SQL注入；比如：张——>'张'
		
	-->
	<!-- <select id="findUserByUsername" parameterType="String" resultType="com.itheima.mybatis.pojo.User">
		select * from user where username like #{usernamefghjk}
	</select> -->
	<!-- 第二种方式 
		${}: SQL字符串拼接符
		如果输入参数类型是简繁类型的话那么字符串拼接符中只能是Value
		
		没有预编译过程，那么不能防止SQL注入，不安全；
		比如：张——>张
	-->
	<!-- <select id="findUserByUsername" parameterType="String" resultType="com.itheima.mybatis.pojo.User">
		select * from user where username like '%${value}%'
	</select> -->
	<!-- 第三种方式：防止SQL注入并不用些%% 
		才是在企业中最常用的查询方式
	-->
	<select id="findUserByUsername" parameterType="String" resultType="com.itheima.pojo.User">
		select * from user where username like "%"#{username}"%"
	</select>
	
	<!-- parameterType:当输入参数类型为POJO对象时，
		那么占位符里面必须是POJO中的属性名，
		那么MyBatis框架会自动根据POJO的属性名的get方法获取里面的值 -->
	<insert id="addUser" parameterType="com.itheima.pojo.User">
		<!-- selectKey ： 查询返回主键的标签
			keyProperty: 对应着POJO的主键
			order: 指定在什么情况下查询这句话
				MySQL数据库：
					a) 主键自增长： Order = AFTER
					b) 主键UUID： Order = BEFORE
				Oracle：
					Order = BEFORE	
				
		 -->
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select LAST_INSERT_ID()
		</selectKey>
		
		insert into user
		(username,birthday,sex,address)
		values
		(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	
</mapper>